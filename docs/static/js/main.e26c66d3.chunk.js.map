{"version":3,"sources":["Restaurents/common.js","Restaurents/Restaurent.jsx","Restaurents/RestaurentsList.jsx","Restaurents/restaurentsListContainer.js","redux/actions.js","Header/Header.jsx","App.js","serviceWorker.js","redux/reducer.js","redux/sagas.js","redux/store.js","index.js"],"names":["getProperties","bgColor","txtColor","backgroundColor","color","ratingColors","Green","Yellow","Orange","White","Restaurant","props","details","className","Card","Body","Row","score","Badge","style","ListGroup","Item","Footer","split","map","cuisin","variant","RestaurentsList","this","getRestaurentsList","err","restaurents","restaurent","Component","connect","state","restaurentReducer","dispatch","type","payload","url","Header","toggleSortType","sortRating","sortCost","class","id","onSubmit","e","preventDefault","placeholder","aria-label","aria-describedby","onChange","searchInputChange","name","href","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","action","Button","onClick","App","filterRestaurents","target","value","field","setState","sortByField","filteredRestaurents","displayRestaurents","window","onscroll","Math","abs","innerHeight","document","documentElement","scrollTop","offsetHeight","nextRestaurents","splice","Container","getDerivedStateFromProps","nextProps","prevState","isEqual","console","log","searchText","genre","sortType","Boolean","location","hostname","match","initialState","loading","combineReducers","fetchRestaurents","filterRestaurentsFromStore","sortRestaurentsInStore","apiWatcher","filterWatcher","sortWatcher","rootSaga","put","restaurentsList","getRestaurentsFromStore","getFilteredRestaurents","select","filter","toUpperCase","indexOf","trim","filteredRestaurentsList","sortedFilteredRestaurents","sort","current","next","sortedRestaurents","cur","takeLatest","all","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e26c66d3.chunk.js","sourcesContent":["const getProperties = (bgColor, txtColor) => ({\r\n  backgroundColor: bgColor,\r\n  color: txtColor,\r\n});\r\n\r\nexport const ratingColors = {\r\n  \"Dark Green\": getProperties(\"darkgreen\", \"#FFFFFF\"),\r\n  Green: getProperties(\"green\", \"#FFFFFF\"),\r\n  Yellow: getProperties(\"yellow\", \"#37474f\"),\r\n  Orange: getProperties(\"orange\", \"#eceff1\"),\r\n  White: getProperties(\"#e0e0e0\", \"#37474f\"),\r\n};\r\n","import React from \"react\";\r\nimport { ListGroup, Card, Row, Badge } from \"react-bootstrap\";\r\nimport { ratingColors } from \"./common\";\r\n// import FontAwesome from \"react-fontawesome\";\r\n\r\nexport default function Restaurant(props) {\r\n  const { details } = props;\r\n  return (\r\n    <div className=\"col-xl-3 col-md-6 mb-4\">\r\n      <Card className=\"border-left-primary shadow h-100\">\r\n        <Card.Body>\r\n          <Row className=\"no-gutters align-items-center\">\r\n            <div className=\"col mr-2\">\r\n              <div className=\"text-xs font-weight-bold text-primary text-uppercase mb-1\">\r\n                {details[\"Restaurant Name\"]}\r\n              </div>\r\n              <div className=\"mb-0 font-weight-bold text-gray-800\">\r\n                {details.score}\r\n              </div>\r\n            </div>\r\n            <div className=\"col-auto\">\r\n              <p>\r\n                <Badge style={ratingColors[details[\"Rating color\"]]}>\r\n                  {details[\"Aggregate rating\"]}\r\n                </Badge>{\" \"}\r\n                <small>{details[\"Rating text\"]}</small>\r\n              </p>\r\n            </div>\r\n          </Row>\r\n          <div>\r\n            <ListGroup className=\"list-group list-group-flush p-0\">\r\n              <ListGroup.Item className=\"p-0 bg-light\">\r\n                <label className=\"text-info m-0\">Cost for 2P:</label>{\" \"}\r\n                {details[\"Average Cost for two\"]}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item className=\"p-0 bg-light\">\r\n                <label className=\"text-info m-0\">Table booking:</label>{\" \"}\r\n                {details[\"Has Table booking\"]}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item className=\"p-0 bg-light\">\r\n                <label className=\"text-info m-0\">Online booking:</label>{\" \"}\r\n                {details[\"Has Online delivery\"]}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item className=\"p-0 bg-light\">\r\n                <label className=\"text-info m-0\">Votes:</label>{\" \"}\r\n                {details[\"Votes\"]}\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </div>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          {details[\"Cuisines\"].split(\",\").map((cuisin) => (\r\n            <Badge className=\"mr-1\" variant=\"info\">\r\n              <p className=\"m-0\">\r\n                <small>{cuisin}</small>\r\n              </p>\r\n            </Badge>\r\n          ))}\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport Restaurent from \"./Restaurent\";\n\nclass RestaurentsList extends Component {\n  componentDidMount() {\n    this.props.getRestaurentsList();\n  }\n  render() {\n    const { err = \"\", restaurents = [] } = this.props;\n    return (\n      <div className=\"row\">\n        {err ? (\n          <h2>{err}</h2>\n        ) : (\n          restaurents.map((restaurent) => <Restaurent details={restaurent} />)\n        )}\n      </div>\n    );\n  }\n}\n\nexport default RestaurentsList;\n","import { connect } from \"react-redux\";\r\nimport RestaurentsList from \"./RestaurentsList\";\r\nimport { getRestaurentsList } from \"../redux/actions\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  err: state.restaurentReducer.err,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getRestaurentsList: () => dispatch(getRestaurentsList()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RestaurentsList);\r\n","export const RETRIVE_RESTAURENTS_LIST = \"RETRIVE_RESTAURENTS_LIST\";\r\nexport const RETRIVE_RESTAURENTS_LIST_FULFILLED =\r\n  \"RETRIVE_RESTAURENTS_LIST_FULFILLED\";\r\nexport const FILTER_RESTAURENTS = \"FILTER_RESTAURENTS\";\r\nexport const FILTER_RESTAURENTS_FULFILLED = \"FILTER_RESTAURENTS_FULFILLED\";\r\nexport const SORT_RESTAURENTS = \"SORT_RESTAURENTS\";\r\nexport const SORT_RESTAURENTS_FULFILLED = \"SORT_RESTAURENTS_FULFILLED\";\r\n\r\nexport const getRestaurentsList = () => {\r\n  return {\r\n    type: RETRIVE_RESTAURENTS_LIST,\r\n    payload: {\r\n      url: \"http://starlord.hackerearth.com/gamesext\",\r\n    },\r\n  };\r\n};\r\n\r\nexport const filterRestaurents = (searchText, genre) => ({\r\n  type: FILTER_RESTAURENTS,\r\n  searchText,\r\n  genre,\r\n});\r\n\r\nexport const sortByField = (field, sortType = \"ASC\") => ({\r\n  type: SORT_RESTAURENTS,\r\n  field,\r\n  sortType,\r\n});\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nexport default function Header(props) {\r\n  const { toggleSortType, sortRating, sortCost } = props;\r\n  const toggleCost = () => toggleSortType(\"Average Cost for two\");\r\n  const toggleRating = () => toggleSortType(\"Aggregate rating\");\r\n  return (\r\n    <nav className=\"navbar navbar-expand navbar-light bg-primary topbar mb-4 static-top shadow\">\r\n      <button class=\"btn navbar-brand\">\r\n        <i className=\"fa fa-paypal\"></i>aypal\r\n      </button>\r\n      <button\r\n        id=\"sidebarToggleTop\"\r\n        className=\"btn btn-link d-md-none rounded-circle mr-3\"\r\n      >\r\n        <i className=\"fa fa-bars\"></i>\r\n      </button>\r\n      <form\r\n        onSubmit={(e) => e.preventDefault()}\r\n        className=\"d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search\"\r\n      >\r\n        <div className=\"input-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control bg-light border-0 small\"\r\n            placeholder=\"Search for Restaurents or Cuisines...\"\r\n            aria-label=\"Search\"\r\n            aria-describedby=\"basic-addon2\"\r\n            onChange={props.searchInputChange}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button className=\"btn btn-warning\" type=\"button\">\r\n              <FontAwesome name=\"search\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <ul className=\"navbar-nav ml-auto\">\r\n        <li className=\"nav-item dropdown no-arrow d-sm-none\">\r\n          <a\r\n            href=\"123\"\r\n            className=\"nav-link dropdown-toggle\"\r\n            id=\"searchDropdown\"\r\n            role=\"button\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n          >\r\n            <i className=\"fas fa-search fa-fw\"></i>\r\n          </a>\r\n          <div\r\n            className=\"dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in\"\r\n            aria-labelledby=\"searchDropdown\"\r\n          >\r\n            <form\r\n              action=\"#\"\r\n              className=\"form-inline mr-auto w-100 navbar-search\"\r\n            >\r\n              <div className=\"input-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control bg-light border-0 small\"\r\n                  placeholder=\"Search for...\"\r\n                  aria-label=\"Search\"\r\n                  aria-describedby=\"basic-addon2\"\r\n                />\r\n                <div className=\"input-group-append\">\r\n                  <button className=\"btn btn-primary\" type=\"button\">\r\n                    <i className=\"fas fa-search fa-sm\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </li>\r\n        <li>\r\n          <Button className=\"mr-2\" variant=\"light\" onClick={toggleRating}>\r\n            Rating{\" \"}\r\n            <FontAwesome\r\n              className=\"ml-5\"\r\n              name={\r\n                sortRating === \"ASC\" ? \"sort-numeric-asc\" : \"sort-numeric-desc\"\r\n              }\r\n            />\r\n          </Button>\r\n          <Button className=\"mr-2 mr-auto\" variant=\"light\" onClick={toggleCost}>\r\n            Cost{\" \"}\r\n            <FontAwesome\r\n              className=\"ml-5\"\r\n              name={\r\n                sortCost === \"ASC\" ? \"sort-numeric-asc\" : \"sort-numeric-desc\"\r\n              }\r\n            />\r\n          </Button>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\n\nimport { filterRestaurents, sortByField } from \"./redux/actions\";\nimport RestaurentsList from \"./Restaurents/restaurentsListContainer\";\nimport isEqual from \"lodash.isequal\";\nimport Header from \"./Header/Header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      restaurents: props.restaurents,\n      filteredRestaurents: props.restaurents,\n      displayRestaurents: [],\n      sortRating: \"ASC\",\n      sortCost: \"ASC\",\n    };\n\n    // Binds our scroll event handler\n    window.onscroll = () => {\n      // Checks that the page has scrolled to the bottom\n      if (\n        Math.abs(\n          window.innerHeight +\n            document.documentElement.scrollTop -\n            document.documentElement.offsetHeight\n        ) < 2\n      ) {\n        let { filteredRestaurents } = this.state;\n        const nextRestaurents = filteredRestaurents.splice(0, 20);\n        this.setState({\n          displayRestaurents: [\n            ...this.state.displayRestaurents,\n            ...nextRestaurents,\n          ],\n          filteredRestaurents,\n        });\n      }\n    };\n  }\n\n  static getDerivedStateFromProps = (nextProps, prevState) => {\n    if (!isEqual(prevState.restaurents, nextProps.restaurents)) {\n      console.log(prevState.filteredRestaurents, nextProps.restaurents);\n      const filteredRestaurents = [...nextProps.restaurents];\n      const displayRestaurents = filteredRestaurents.splice(0, 20);\n      return {\n        restaurents: [...nextProps.restaurents],\n        filteredRestaurents: filteredRestaurents,\n        displayRestaurents: displayRestaurents,\n        err: nextProps.err,\n      };\n    }\n    return null;\n  };\n\n  searchInputChange = (e) => {\n    const { filterRestaurents } = this.props;\n    filterRestaurents(e.target.value, \"\");\n  };\n\n  toggleSortType = (field) => {\n    let type = \"\";\n    if (field === \"Average Cost for two\") {\n      type = this.state.sortCost === \"ASC\" ? \"DESC\" : \"ASC\";\n      this.setState({ sortCost: type });\n    } else if (field === \"Aggregate rating\") {\n      type = this.state.sortRating === \"ASC\" ? \"DESC\" : \"ASC\";\n      this.setState({ sortRating: type });\n    }\n    this.props.sortByField(field, type);\n  };\n\n  render() {\n    return (\n      <div id=\"content d-flex bg-light flex-column\">\n        <Header\n          searchInputChange={this.searchInputChange}\n          sortRating={this.state.sortRating}\n          sortCost={this.state.sortCost}\n          toggleSortType={this.toggleSortType}\n        />\n        <Container className=\"overflow-auto\">\n          <RestaurentsList restaurents={this.state.displayRestaurents} />\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  restaurents: state.restaurentReducer.filteredRestaurents,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  filterRestaurents: (searchText, genre) =>\n    dispatch(filterRestaurents(searchText, genre)),\n  sortByField: (field, sortType) => dispatch(sortByField(field, sortType)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\n\r\nimport {\r\n  RETRIVE_RESTAURENTS_LIST,\r\n  RETRIVE_RESTAURENTS_LIST_FULFILLED,\r\n  FILTER_RESTAURENTS_FULFILLED,\r\n  SORT_RESTAURENTS_FULFILLED,\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  restaurents: [],\r\n  filteredRestaurents: [],\r\n  loading: false,\r\n};\r\n\r\nconst restaurentReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case RETRIVE_RESTAURENTS_LIST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        err: \"\",\r\n        restaurents: [],\r\n        filteredRestaurents: [],\r\n      };\r\n    case RETRIVE_RESTAURENTS_LIST_FULFILLED:\r\n      return {\r\n        ...state,\r\n        restaurents: action.restaurents,\r\n        filteredRestaurents: action.restaurents,\r\n        loading: false,\r\n        err: \"\",\r\n      };\r\n    case FILTER_RESTAURENTS_FULFILLED:\r\n      return { ...state, filteredRestaurents: action.filteredRestaurents };\r\n    case SORT_RESTAURENTS_FULFILLED:\r\n      return {\r\n        ...state,\r\n        restaurents: action.restaurents,\r\n        filteredRestaurents: action.filteredRestaurents,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  restaurentReducer,\r\n});\r\n","import { select, put, takeLatest, all } from \"redux-saga/effects\";\r\nimport restaurentsList from \"../restaurents.json\";\r\n\r\nimport {\r\n  FILTER_RESTAURENTS_FULFILLED,\r\n  RETRIVE_RESTAURENTS_LIST,\r\n  RETRIVE_RESTAURENTS_LIST_FULFILLED,\r\n  FILTER_RESTAURENTS,\r\n  SORT_RESTAURENTS_FULFILLED,\r\n  SORT_RESTAURENTS,\r\n} from \"./actions\";\r\n\r\nfunction* fetchRestaurents(action) {\r\n  yield put({\r\n    type: RETRIVE_RESTAURENTS_LIST_FULFILLED,\r\n    restaurents: restaurentsList,\r\n    err: \"\",\r\n  });\r\n}\r\n\r\nconst getRestaurentsFromStore = (state) => state.restaurentReducer.restaurents;\r\nconst getFilteredRestaurents = (state) =>\r\n  state.restaurentReducer.filteredRestaurents;\r\n\r\nfunction* filterRestaurentsFromStore(action) {\r\n  const restaurentsList = yield select(getRestaurentsFromStore);\r\n  const filteredRestaurents = restaurentsList.filter(\r\n    (restaurent) =>\r\n      restaurent[\"Restaurant Name\"]\r\n        .toUpperCase()\r\n        .indexOf(action.searchText.toUpperCase().trim()) >= 0 ||\r\n      restaurent[\"Cuisines\"]\r\n        .toUpperCase()\r\n        .indexOf(action.searchText.toUpperCase().trim()) >= 0\r\n  );\r\n  yield put({\r\n    type: FILTER_RESTAURENTS_FULFILLED,\r\n    filteredRestaurents,\r\n    err: \"\",\r\n  });\r\n}\r\n\r\nfunction* sortRestaurentsInStore(action) {\r\n  const { field, sortType = \"ASC\" } = action;\r\n  console.log(\"got saga\", field, sortType);\r\n  const filteredRestaurentsList = yield select(getFilteredRestaurents);\r\n  const restaurentsList = yield select(getRestaurentsFromStore);\r\n  const sortedFilteredRestaurents = filteredRestaurentsList.sort(\r\n    (current, next) =>\r\n      sortType === \"ASC\"\r\n        ? current[field] - next[field]\r\n        : next[field] - current[field]\r\n  );\r\n  const sortedRestaurents = restaurentsList.sort((cur, next) =>\r\n    sortType === \"ASC\" ? cur[field] - next[field] : next[field] - cur[field]\r\n  );\r\n  yield put({\r\n    type: SORT_RESTAURENTS_FULFILLED,\r\n    restaurents: sortedRestaurents,\r\n    filteredRestaurents: sortedFilteredRestaurents,\r\n    err: \"\",\r\n  });\r\n}\r\n\r\nfunction* apiWatcher() {\r\n  yield takeLatest(RETRIVE_RESTAURENTS_LIST, fetchRestaurents);\r\n}\r\nfunction* filterWatcher() {\r\n  yield takeLatest(FILTER_RESTAURENTS, filterRestaurentsFromStore);\r\n}\r\nfunction* sortWatcher() {\r\n  yield takeLatest(SORT_RESTAURENTS, sortRestaurentsInStore);\r\n}\r\n\r\nexport default function* rootSaga(state) {\r\n  yield all([apiWatcher(), filterWatcher(), sortWatcher()]);\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootReducer from \"./reducer\";\r\nimport rootSaga from \"./sagas\";\r\n\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nconst initialState = {\r\n  restaurentReducer: {\r\n    restaurents: [],\r\n    filteredRestaurents: [],\r\n    loading: false,\r\n  },\r\n};\r\n\r\nexport default createStore(\r\n  rootReducer,\r\n  initialState,\r\n  applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}